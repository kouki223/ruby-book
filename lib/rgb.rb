# RGBカラー変換プロプログラム
# - Red
#     - R=65 => 10進数の整数
# - Green
#     - G=105 => 10進数の整数
# - Blue
#     - B=225 => 10進数の整数
# - システム要件
#     - 10進数を16進数に変換するto_hexメソッド
#         - to_hexメソッドは3つの整数を受け取る。
#         - それぞれを16進数に変換した文字列を返し、文字列の先頭には“#”を付ける。
#     - 16進数を10進数に変換するto_intsメソッド
#         - to_intsメソッドはRGBカラーを表す16進数の文字列を受け取る。
#         - R、G、Bのそれぞれを10進数の整数に変換した値を配列として返す。
#         ´´´Ruby
#         to_hex(0, 0, 0) #=> "#000000"
#         to_hex(255, 255, 255) #=> "#ffffff"
#         to_hex(4, 60, 120) #=> "#043c78"
#         to_ints('#000000') #=> [0, 0, 0]
#         to_ints('#ffffff') #=> [255, 255, 255]
#         to_ints('#043c78') #=> [4, 60, 120]

# リファクタリングする
# to_sメソッド、.rjustが複数回呼ばれている
# これはDRYの原則に外れている
# これは同じ処理を3回繰り返しているという状態
# では、配列に入れて処理を実行する形にする

# def to_hex(r, g, b)
#   '#' +
#   r.to_s(16).rjust(2, '0') +
#   g.to_s(16).rjust(2, '0') +
#   b.to_s(16).rjust(2, '0')
# end

# 一度目のリファクタリング
# 配列に値を入れて配列に対して繰り返し処理を実行する

# def to_hex(r, g, b)
#   hex = '#'
#   [r, g, b].each do |n|
#     hex += n.to_s(16).rjust(2, '0')
#   end
#   hex
# end

def to_hex(r, g, b)
  [r, g, b].sum('#')do |n|
    n.to_s(16).rjust(2, '0')
  end
end

# 16進数を10進数に変換するto_intsメソッド
# - to_intsメソッドはRGBカラーを表す16進数の文字列を受け取る。
# - R、G、Bのそれぞれを10進数の整数に変換した値を配列として返す。
#   - 文字列から16進数の文字列を2文字ずつ取り出す。
#   - 2桁の16進数を10進数の整数に変換する。

# intsメソッドの実装

# 配列から要素を抜き出す
# 
#s = 'abcde'
#  s[1..3] #=> "bcd"

# R,G,Bの要素を抜き出す
# 
#　hex = '#12abcd'
# r = hex[1..2] #=> "12"
# g = hex[3..4] #=> "ab"
# b = hex[5..6] #=> "cd"

# def to_ints(hex)
#   r = hex[1..2]
#   g = hex[3..4]
#   b = hex[5..6]
#   ints = []
#   [r, g, b].each do ¦s¦
#   ints << s.hex
#   end
#   ints
# end

# リファクタリング最終形態
# ブロック外での変数作成をなくす
# ↓
# mapメソッドを正規表現とscanメソッドを使い少なく表現
# ↓
# (&:hex) &:メソッド名の形を使う

def to_ints(hex)
  hex.scan(/\w\w/).map(&:hex)
end
